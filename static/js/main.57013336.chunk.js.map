{"version":3,"sources":["redux/actions/index.js","redux/actions/textActions.js","utilities/textFormat.js","components/json/JsonViewer.jsx","components/visualize/Visualize.jsx","components/editor/Editor.jsx","components/utilitypage/UtilitiesPage.jsx","App.js","serviceWorker.js","redux/reducers/textReducer.js","redux/reducers/index.js","redux/reducers/jsonReducer.js","index.js","redux/configureStore.js"],"names":["ACTIONS","SET_CURRENT_TEXT","SET_JSON1","SET_EDITOR_TEXT","setCurrentText","current","type","FORMAT","getTextFormat","text","trim","startsWith","JSON","parse","JsonViewer","src","onEdit","onAdd","onDelete","name","VisualizeView","alignSelf","alignItems","alignContent","format","connect","state","texts","dispatch","useState","mt","history","map","t","i","key","onClick","size","setState","handleClick","e","onSubmit","onChange","target","value","defaultValue","editor","rows","UtilitiesPage","props","option","setstate","m","as","px","id","bordered","textAlign","theme","button","borderRadius","xs","sm","md","lg","xl","space","breakpoints","ix","xxl","fontSizes","App","className","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","jsons","json1","json2","action","json","slice","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducers","applyMiddleware","reduxImmutableStateInvariant","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57013336.chunk.js","sourcesContent":["const ACTIONS = {\r\n  SET_CURRENT_TEXT: \"SET_CURRENT_TEXT\",\r\n  SET_JSON1: \"SET_JSON1\",\r\n  SET_EDITOR_TEXT: \"SET_EDITOR_TEXT\",\r\n};\r\n\r\nexport default ACTIONS;\r\n","import ACTIONS from \"./index\";\r\n\r\nexport function setCurrentText(current) {\r\n  return { type: ACTIONS.SET_CURRENT_TEXT, current };\r\n}\r\n\r\nexport function setEditorText(text) {\r\n  return { type: ACTIONS.SET_EDITOR_TEXT, text };\r\n}\r\n","export const FORMAT = {\r\n  JSON: \"json\",\r\n  XML: \"xml\",\r\n  YAML: \"yaml\",\r\n  PLAIN_TEXT: \"text\",\r\n};\r\n\r\nexport function getTextFormat(text) {\r\n  if (text) {\r\n    if (text.trim().startsWith(\"<\")) {\r\n      return FORMAT.XML;\r\n    }\r\n\r\n    try {\r\n      JSON.parse(text);\r\n      return FORMAT.JSON;\r\n    } catch {}\r\n  }\r\n\r\n  return FORMAT.PLAIN_TEXT;\r\n}\r\n","import React from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\n\r\nfunction JsonViewer({ text }) {\r\n  return (\r\n    <div>\r\n      <ReactJson\r\n        src={JSON.parse(text)}\r\n        onEdit={() => true}\r\n        onAdd={() => true}\r\n        onDelete={() => true}\r\n        name={false}\r\n      ></ReactJson>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JsonViewer;\r\n","import React, { useState } from \"react\";\r\nimport Box from \"styled-minimal/Box\";\r\nimport { connect } from \"react-redux\";\r\nimport Textarea from \"styled-minimal/Textarea\";\r\nimport Button from \"styled-minimal/Button\";\r\nimport { setCurrentText } from \"../../redux/actions/textActions\";\r\nimport { getTextFormat, FORMAT } from \"../../utilities/textFormat\";\r\nimport JsonViewer from \"../json/JsonViewer\";\r\nimport Flex from \"styled-minimal/Flex\";\r\n\r\nfunction Visualize({ dispatch, texts }) {\r\n  const [state, setState] = useState({ text: \"{}\" });\r\n\r\n  const handleClick = (e) => {\r\n    dispatch(setCurrentText(state.text, getTextFormat(state.text)));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setState({ ...state, text: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Textarea onChange={handleChange}>{texts.current.text}</Textarea>\r\n      <Button onClick={handleClick}>Click Me</Button> */}\r\n      <VisualizeView current={texts.current}></VisualizeView>\r\n      <Box mt={50}></Box>\r\n      History\r\n      {texts.history.map((t, i) => (\r\n        <Flex>\r\n          {i + 1}.<VisualizeView key={i} current={t}></VisualizeView>{\" \"}\r\n          <Button onClick={() => dispatch(setCurrentText(t))} size={\"xs\"}>\r\n            Load\r\n          </Button>\r\n        </Flex>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction VisualizeView({ current }) {\r\n  return (\r\n    <Box alignSelf=\"left\" alignItems=\"left\" alignContent=\"0\">\r\n      {current.format === FORMAT.JSON && (\r\n        <JsonViewer text={current.text}></JsonViewer>\r\n      )}\r\n      {current.format === FORMAT.PLAIN_TEXT && <Box>{current.text}</Box>}\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    texts: state.texts,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Visualize);\r\n","import React, { useState } from \"react\";\r\nimport { setCurrentText, setEditorText } from \"../../redux/actions/textActions\";\r\nimport { getTextFormat } from \"../../utilities/textFormat\";\r\nimport Textarea from \"styled-minimal/Textarea\";\r\nimport Button from \"styled-minimal/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport Form from \"styled-minimal/Form\";\r\n\r\nfunction Editor({ dispatch, texts }) {\r\n  const [state, setState] = useState({ text: \"{}\" });\r\n\r\n  const handleClick = (e) => {\r\n    dispatch(\r\n      setCurrentText({ text: state.text, format: getTextFormat(state.text) })\r\n    );\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setState({ ...state, text: e.target.value });\r\n    dispatch(setEditorText(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleClick}>\r\n        <Textarea\r\n          onChange={handleChange}\r\n          defaultValue={texts.editor}\r\n          rows={20}\r\n        ></Textarea>\r\n        <Button onClick={handleClick}>Load Text</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    texts: state.texts,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Editor);\r\n","import React, { useState } from \"react\";\r\nimport Box from \"styled-minimal/Box\";\r\nimport Button from \"styled-minimal/Button\";\r\nimport ButtonGroup from \"styled-minimal/ButtonGroup\";\r\nimport Flex from \"styled-minimal/Flex\";\r\nimport Heading from \"styled-minimal/Heading\";\r\nimport Visualize from \"../visualize/Visualize\";\r\nimport Editor from \"../editor/Editor\";\r\nimport Paragraph from \"styled-minimal/Paragraph\";\r\n\r\nconst VISUALIZE = \"VISUALIZE\";\r\nconst QUERY = \"QUERY\";\r\nconst COMPARE = \"COMPARE\";\r\nconst MANIPULATE = \"MANIPULATE\";\r\nconst EDITOR = \"EDITOR\";\r\n\r\nfunction UtilitiesPage(props) {\r\n  const [state, setstate] = useState({ option: EDITOR });\r\n\r\n  const handleClick = (option) => {\r\n    setstate({ ...state, option: option });\r\n  };\r\n\r\n  return (\r\n    <Box m={2}>\r\n      <Heading as=\"h4\">\r\n        <Flex>\r\n          <Box>Text Utilites</Box>\r\n\r\n          <ButtonGroup px={50}>\r\n            <Button\r\n              id={EDITOR}\r\n              onClick={() => handleClick(EDITOR)}\r\n              bordered={state.option === EDITOR}\r\n            >\r\n              Editor\r\n            </Button>\r\n            <Button\r\n              id={VISUALIZE}\r\n              onClick={() => handleClick(VISUALIZE)}\r\n              bordered={state.option === VISUALIZE}\r\n            >\r\n              Visualize\r\n            </Button>\r\n            <Button\r\n              id={QUERY}\r\n              onClick={() => handleClick(QUERY)}\r\n              bordered={state.option === QUERY}\r\n            >\r\n              Query\r\n            </Button>\r\n            <Button\r\n              id={COMPARE}\r\n              onClick={() => handleClick(COMPARE)}\r\n              bordered={state.option === COMPARE}\r\n            >\r\n              Compare\r\n            </Button>\r\n            <Button\r\n              id={MANIPULATE}\r\n              onClick={() => handleClick(MANIPULATE)}\r\n              bordered={state.option === MANIPULATE}\r\n            >\r\n              Manipulate\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Flex>\r\n      </Heading>\r\n      <Box textAlign=\"left\" mt={20}>\r\n        {state.option === VISUALIZE && <Visualize></Visualize>}\r\n        {state.option === EDITOR && <Editor></Editor>}\r\n        {state.option === QUERY && \"Coming Soon..\"}\r\n        {state.option === COMPARE && \"Coming Soon..\"}\r\n        {state.option === MANIPULATE && \"Coming Soon..\"}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default UtilitiesPage;\r\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport \"./App.css\";\nimport UtilitiesPage from \"./components/utilitypage/UtilitiesPage\";\n\nconst theme = {\n  button: {\n    borderRadius: {\n      xs: \"2px\",\n      sm: \"3px\",\n      md: \"4px\",\n      lg: \"6px\",\n      xl: \"8px\",\n    },\n  },\n  space: [0, 4, 8, 12, 16, 24, 32, 64, 128],\n  breakpoints: {\n    xs: 0,\n    ix: 400,\n    md: 768,\n    lg: 1024,\n    xl: 1360,\n    xxl: 1920,\n  },\n  fontSizes: [12, 14, 16, 18, 22, 26, 32, 48],\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <UtilitiesPage></UtilitiesPage>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ACTIONS from \"./../actions\";\r\nimport { FORMAT } from \"../../utilities/textFormat\";\r\n\r\nconst current = { text: \"{}\", format: FORMAT.JSON };\r\nconst initialState = { current, history: [], editor: current.text };\r\n\r\nexport default function textReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_CURRENT_TEXT:\r\n      const current = action.current;\r\n      return {\r\n        ...state,\r\n        current: current,\r\n        history: [current, ...state.history].slice(-10),\r\n      };\r\n    case ACTIONS.SET_EDITOR_TEXT:\r\n      return {\r\n        ...state,\r\n        editor: action.text,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport jsons from \"./jsonReducer\";\r\nimport texts from \"./textReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  jsons,\r\n  texts,\r\n});\r\n\r\nexport default rootReducer;\r\n","import ACTIONS from \"../actions\";\r\n\r\nexport default function jsonReducer(\r\n  state = { json1: \"{}\", json2: \"{}\" },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_JSON1:\r\n      return { ...state, json1: action.json };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducers from \"./reducers\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\n\r\nexport default function configureStore(initialState) {\r\n  const composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //add support for Redux dev tools\r\n  return createStore(\r\n    rootReducers,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(reduxImmutableStateInvariant()))\r\n  );\r\n}\r\n"],"sourceRoot":""}